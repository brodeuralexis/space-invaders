export const Keys = {
  Space: 32
}

export class KeyManager {
  constructor () {
    this._bound = false
    this._keysDown = {}
    this._keysUp = {}
    this._keysPressed = {}

    this.bind()
  }

  /**
   * Indicates whether or not the key is pressed.
   * @param {keyof Keys | number} keyOrCode The key
   * @returns {boolean} If the key is pressed
   */
  isPressed (keyOrCode) {
    let code = this._toKeyCode(keyOrCode)

    return Boolean(this._keysPressed[code] || this._keysDown[code])
  }

  /**
   * Indicates whether or not the key is released.
   * @param {keyof Keys | number} keyOrCode The key
   * @returns {boolean} If the key is released
   */
  isReleased (keyOrCode) {
    return !this.isPressed(keyOrCode)
  }

  /**
   * Indicates whether or not the key is currently down.
   *
   * A key may be pressed if it was previously down and still not released.
   * @param {keyof Keys | number} keyOrCode The key
   * @returns {boolean} If the key is down
   */
  isDown (keyOrCode) {
    let code = this._toKeyCode(keyOrCode)

    return Boolean(this._keysDown[code])
  }

  /**
   * Indicates whether or not the key is currently being released.
   *
   * An up key only occurs on the tick it was released.
   * @param {keyof Keys | number} keyOrCode The key
   * @returns {boolean} If the key is up
   */
  isUp (keyOrCode) {
    let code = this._toKeyCode(keyOrCode)

    return Boolean(this._keysUp[code])
  }

  /**
   * Binds the key manager to the events generated by the document.
   */
  bind () {
    if (this.bound) {
      return
    }

    this.bound = true

    document.addEventListener('keyup', this.onKeyUp)
    document.addEventListener('keydown', this.onKeyDown)
  }

  /**
   * Unbinds the key manager to the events generated by the document.
   */
  unbind () {
    if (!this.bound) {
      return
    }

    this.bound = false

    document.removeEventListener('keyup', this.onKeyUp)
    document.removeEventListener('keydown', this.onKeyDown)
  }

  /**
   * Updates the state of this manager.
   *
   * All down keys will become pressed keys.
   * @param {number} _delta The elapsed time since the last tick
   */
  tick (_delta) {
    for (const key in this._keysDown) {
      this._keysPressed[key] = this._keysDown[key];
    }

    this._keysDown = {}
    this._keysUp = {}
  }

  /**
   * Handler for a key up event from the keyboard.
   * @param {KeyboardEvent} event The event
   */
  onKeyUp = event => {
    this._keysUp[event.keyCode] = true;

    delete this._keysDown[event.keyCode];
    delete this._keysPressed[event.keyCode];
  }

  /**
   * Handler for a key down event from the keyboard.
   * @param {KeyboardEvent} event The event
   */
  onKeyDown = event => {
    console.log('Code:', event.code)
    console.log('Test:', event)
    console.log('KeyCode:', event.keyCode)

    this._keysDown[event.keyCode] = true;
  }

  /**
   * Takes a key and returns the code for said key.
   * @param {keyof Keys | number} keyOrCode The key
   * @returns {number} The code for the given key
   */
  _toKeyCode (keyOrCode) {
    return typeof keyOrCode === 'string' ? Keys[keyOrCode] : keyOrCode
  }
}
